[{"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\index.js":"1","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\App.js":"2","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\serviceWorker.js":"3","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\store.js":"4","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Sidebar.js":"5","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\firebase.js":"6","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArea.js":"7","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Chat.js":"8","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Login.js":"9","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Header.js":"10","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\appSlice.js":"11","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\SidebarOption.js":"12","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatInput.js":"13","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Message.js":"14","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Popovers.js":"15","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatEngine.js":"16","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\MyMessage.js":"17","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TheirMessages.js":"18","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\TextInput.js":"19","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\Mentions.js":"20","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\firestoreSlice.js":"21","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArena.js":"22","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Arena Playground\\List.js":"23"},{"size":727,"mtime":1617803060362,"results":"24","hashOfConfig":"25"},{"size":3022,"mtime":1617965198488,"results":"26","hashOfConfig":"25"},{"size":5141,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":272,"mtime":1617901769466,"results":"28","hashOfConfig":"25"},{"size":6206,"mtime":1618228032812,"results":"29","hashOfConfig":"25"},{"size":586,"mtime":1617803915978,"results":"30","hashOfConfig":"25"},{"size":748,"mtime":1617866740270,"results":"31","hashOfConfig":"25"},{"size":8713,"mtime":1617474549935,"results":"32","hashOfConfig":"25"},{"size":1801,"mtime":1617712641529,"results":"33","hashOfConfig":"25"},{"size":2096,"mtime":1615916957599,"results":"34","hashOfConfig":"25"},{"size":662,"mtime":1617901329392,"results":"35","hashOfConfig":"25"},{"size":5665,"mtime":1618232999890,"results":"36","hashOfConfig":"25"},{"size":3328,"mtime":1617966646282,"results":"37","hashOfConfig":"25"},{"size":12996,"mtime":1617802480327,"results":"38","hashOfConfig":"25"},{"size":1742,"mtime":1616672585267,"results":"39","hashOfConfig":"25"},{"size":961,"mtime":1617357279026,"results":"40","hashOfConfig":"25"},{"size":713,"mtime":1617811958362,"results":"41","hashOfConfig":"25"},{"size":300,"mtime":1617443585094,"results":"42","hashOfConfig":"43"},{"size":2784,"mtime":1617706181891,"results":"44","hashOfConfig":"25"},{"size":1567,"mtime":1617706185724,"results":"45","hashOfConfig":"25"},{"size":725,"mtime":1617902744789,"results":"46","hashOfConfig":"25"},{"size":2996,"mtime":1618221814210,"results":"47","hashOfConfig":"25"},{"size":1493,"mtime":1618223970913,"results":"48","hashOfConfig":"25"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1is146h",{"filePath":"52","messages":"53","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"51"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"51"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"51"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qtp3n2",{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"51"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"51"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\index.js",[],["108","109"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\App.js",["110","111","112","113","114","115","116","117","118","119","120"],"import React, {useState} from 'react';\r\nimport styled from \"styled-components\"\r\n\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Header from \"./components/Header\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Chat from \"./components/Chat\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport {auth} from \"./app/firebase\";\r\nimport Login from \"./components/Login\";\r\nimport Spinner from \"react-spinkit\";\r\nimport TestArea from \"./components/TestArea\";\r\nimport ChatEngine from \"./components/ChatEngine\";\r\nimport Button from \"reactstrap/es/Button\";\r\nimport {askForPermissioToReceiveNotifications} from \"./components/MyMessage\";\r\nimport {firestoreBadge} from \"./components/SidebarOption\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectRoomId} from \"./features/appSlice\";\r\nimport {setBadge} from \"./features/firestoreSlice\";\r\nimport TestArena from \"./components/TestArena\";\r\n\r\n\r\n\r\nfunction App() {\r\n    const [user, loading] = useAuthState(auth)\r\n    const [userID] = useAuthState(auth);\r\n\r\n    const [hideBadge, setHideBadge] = useState(true)\r\n\r\n\r\n    //firestoreBadge(userID, setHideBadge, \"2ATXydVpGG7nsudrYDyX\")\r\n\r\n    if (loading){\r\n        return (\r\n            <AppLoading>\r\n                <AppLoadingContents>\r\n                    <img src=\"https://cdn.mos.cms.futurecdn.net/SDDw7CnuoUGax6x9mTo7dd.jpg\" alt=\"\"/>\r\n                    <Spinner\r\n                        name=\"ball-spin-fade-loader\"\r\n                        color=\"purple\"\r\n                        fadeIn=\"none\"\r\n                    />\r\n                </AppLoadingContents>\r\n            </AppLoading>\r\n\r\n        )\r\n    }\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <Router>\r\n            {!user ? (\r\n                <Login/>\r\n            ):(\r\n                <>\r\n\r\n\r\n                    <Switch>\r\n\r\n                        <Route path=\"/test\">\r\n                            <TestArea/>\r\n                        </Route>\r\n                        <Route path=\"/arena\">\r\n                            <TestArena/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/\">\r\n                            <Header/>\r\n                            <AppBody>\r\n                                <Sidebar/>\r\n                                <Chat/>\r\n                            </AppBody>\r\n\r\n\r\n                        </Route>\r\n                    </Switch>\r\n\r\n\r\n                </>\r\n            )}\r\n\r\n        </Router>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nconst AppBody = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  \r\n  \r\n`\r\nconst AppLoadingContents = styled.div`\r\n  text-align: center;\r\n  padding-bottom: 100px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  >img{\r\n  height: 100px;\r\n  padding: 20px;\r\n  margin-bottom: 40px;\r\n  }\r\n`\r\nconst AppLoading = styled.div`\r\ndisplay: grid;\r\nplace-items: center;\r\nheight: 100vh;\r\nwidth: 100%;\r\n\r\n`\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\serviceWorker.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\store.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Sidebar.js",["121","122","123","124","125","126","127","128","129","130","131","132","133"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\firebase.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArea.js",["134","135","136","137","138","139"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport TextInput from \"./Test Environment/TextInput\";\r\nimport {askForPermissioToReceiveNotifications} from \"./MyMessage\";\r\nimport Button from \"reactstrap/es/Button\";\r\nimport {auth, db} from \"../app/firebase\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectRoomId} from \"../features/appSlice\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\n\r\nfunction TestArea(props) {\r\n    const roomId = useSelector(selectRoomId)\r\n    const [userID] = useAuthState(auth);\r\n\r\n\r\n    return (\r\n        <>\r\n        <TextInput/>\r\n\r\n            <Button onClick={askForPermissioToReceiveNotifications}>Ask for Permission</Button>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n}\r\nexport default TestArea;\r\n\r\n\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Chat.js",["140","141","142","143","144","145","146"],"import React, {useEffect, useRef, useState} from 'react';\nimport styled from 'styled-components'\nimport StarBorderOutlinedIcon from \"@material-ui/icons/StarBorderOutlined\"\nimport InfoOutlineIcon from \"@material-ui/icons/InfoOutlined\"\nimport {useSelector} from \"react-redux\";\nimport {selectRoomId} from \"../features/appSlice\";\nimport ChatInput from \"./ChatInput\";\nimport {useCollection, useDocument} from \"react-firebase-hooks/firestore\";\nimport {auth, db} from \"../app/firebase\";\nimport Message from \"./Message\";\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport Spinner from \"react-spinkit\";\nimport MyMessage from \"./MyMessage\";\n\n\nfunction Chat(props) {\n    const chatRef = useRef(null);\n    const roomId = useSelector(selectRoomId)\n    const [renderMessage, setRenderMessages] = useState([])\n    const [roomDetails] = useDocument(\n        roomId && db.collection('rooms').doc(roomId)\n    );\n    const [roomMessages, loading] = useCollection(\n        roomId && db.collection('rooms')\n            .doc(roomId)\n            .collection('messages')\n            .orderBy('timestamp', 'asc')\n    );\n    const [userID] = useAuthState(auth);\n    const messagesRef =  roomId && db.collection('rooms')\n        .doc(roomId)\n        .collection('messages')\n        .orderBy('timestamp', 'asc')\n\n\n         const allMessagesRef = roomId && db.collection('rooms').doc(roomId).collection('messages').orderBy('timestamp', 'asc');\n\n\n\n    //console.log(roomMessages)\n    console.log(roomId)\n\n\n\n    /*messagesRef?.get().then((docus) => {\n        docus.docs.map((doc) => {\n            //console.log(doc.data())\n            renderMessage.push({\n                id:doc.get('user_id'),\n                message: doc.get('message'),\n                user_name: doc.get('user')\n            })\n            setRenderMessages(renderMessage)\n            //console.log(renderMessage)\n        })\n    })*/\n    let lastSenderId = undefined\n\n\n\n    useEffect(() => {\n\n        chatRef?.current?.scrollIntoView({\n            behavior:'smooth',\n\n        });\n        if (loading){\n            return (\n                <AppLoading>\n                    <AppLoadingContents>\n                        <img src=\"https://cdn.mos.cms.futurecdn.net/SDDw7CnuoUGax6x9mTo7dd.jpg\" alt=\"\"/>\n                        <Spinner\n                            name=\"ball-spin-fade-loader\"\n                            color=\"purple\"\n                            fadeIn=\"none\"\n                        />\n                    </AppLoadingContents>\n                </AppLoading>\n\n            )\n        }\n\n    }, [roomId, loading]);\n    let allMsg = [];\n\n\n    //console.log(roomId)\n    return (\n        <ChatContainer>\n            {roomDetails && roomMessages && (\n                <>\n                    <Header>\n                        <HeaderLeft>\n                            <h4><strong>#{roomDetails?.data().name}</strong></h4>\n                            <StarBorderOutlinedIcon/>\n\n                        </HeaderLeft>\n                        <HeaderRight>\n                            <p>\n                                <InfoOutlineIcon/>\n                                Details\n                            </p>\n\n                        </HeaderRight>\n                    </Header>\n                    <ChatMessages>\n\n                        {roomMessages?.docs.map((doc, index) => {\n\n                            const {message, timestamp, user, userImage, user_id} = doc.data();\n\n                            //setRenderMessages(doc.data())\n\n                            let showName = !lastSenderId || user_id !== lastSenderId;\n                            lastSenderId = user_id;\n\n                            return (\n\n                                <Message\n                                    key={doc.id}\n                                    showName={showName}\n                                    message={message}\n                                    user_name={user}\n                                    docId={doc.id}\n                                    user={user}\n                                    userImage={userImage}\n                                    timestamp={timestamp}\n\n                                />\n                            )\n\n\n\n                        })}\n{/*\n\n\n\n\n\n\n\n                        {roomMessages?.docs.map((doc, index) => {\n                            const documetID = doc.id;\n\n                            renderMessage.map((message, indice) => {\n                                let showName = !lastSenderId || message.id !== lastSenderId;\n                                lastSenderId = message.id;\n\n                                //console.log(showName)\n                                //console.log(\"last sender\"+lastSenderId)\n                                if (currUser === lastSenderId){\n                                    return (\n                                    <TheirMessages\n                                        key={index}\n                                        showName={showName}\n                                        message={message.message}\n                                        user_name={message.user_name}/>\n                                        )\n                                }else{\n\n\n                                    return (\n\n                                        <Message\n                                            key={documetID}\n                                            showName={showName}\n                                            message={message.message}\n                                            user_name={message.user_name}\n                                            docId={documetID}\n                                            user={message.user}\n                                            userImage={message.userImage}\n                                            timestamp={message.timestamp}\n\n                                        />\n                                    )\n\n\n                            })\n\n\n                            /*const {message, timestamp, user, userImage, user_id} = doc.data();\n\n\n                            if (userID.uid === user_id){\n                                return (\n                                    <Message\n                                        key={doc.id}\n                                        docId={doc.id}\n                                        user={user}\n                                        user_id={user_id}\n                                        userImage={userImage}\n                                        timestamp={timestamp}\n                                        message={message}\n\n\n                                    />\n                                )\n                            }\n\n\n                            return (\n                                <Message\n                                    key={doc.id}\n                                    docId={doc.id}\n                                    user={user}\n                                    userImage={userImage}\n                                    timestamp={timestamp}\n                                    message={message}\n\n                                />\n                            )*/\n\n                        }\n                        <ChatBottom ref={chatRef}/>\n                    </ChatMessages>\n                    <ChatInput\n                        chatRef={chatRef}\n                        channelName={roomDetails?.data().name}\n                        channelId={roomId}\n                    />\n\n\n                </>\n            )}\n\n        </ChatContainer>\n    );\n}\n\nexport default Chat;\n\nconst ChatContainer = styled.div`\n  flex: .7;\n  flex-grow: 1;\n  overflow-y: scroll;\n  margin-top: 60px;\n  background: whitesmoke;\n`\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n  border-bottom: 1px solid lightgray;\n`\nconst HeaderLeft = styled.div`\ndisplay: flex;\nalign-items: center;\n  >h4{\n  display: flex;\n  text-transform: lowercase;\n  margin-right: 10px;\n  }\n  >h4 >.MuiSvgIcon-root{\n  margin-left: 10px;\n  font-size: 18px;\n  }\n`\nconst HeaderRight = styled.div`\n  >p{\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  \n  \n  }\n  >p > .MuiSvgIcon-root{\n  margin-right: 5px; !important;\n  font-size: 16px;\n  }\n  \n`\nconst ChatMessages = styled.div`\n  \n`\nconst ChatBottom = styled.div`\n  padding-bottom: 200px;\n`\n\nconst AppLoadingContents = styled.div`\n  text-align: center;\n  padding-bottom: 100px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  >img{\n  height: 100px;\n  padding: 20px;\n  margin-bottom: 40px;\n  }\n`\nconst AppLoading = styled.div`\ndisplay: grid;\nplace-items: center;\nheight: 100vh;\nwidth: 100%;\n\n`\n\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Login.js",["147"],"import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {auth, provider, db} from \"../app/firebase\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n\r\nfunction Login(props) {\r\n   const messagesRef = db.collection('users')\r\n    const signIn = e => {\r\n        e.preventDefault();\r\n        auth.signInWithPopup(provider)\r\n            .then((success) => {\r\n                console.log(success)\r\n\r\n\r\n                messagesRef.doc(success.user.uid).set({\r\n                    user_id:success.user.uid,\r\n                    username:success.user.displayName\r\n                })\r\n            })\r\n            .catch((error) => {\r\n           alert(\"We encounter this error while trying to sign you in with google: \"+error.message);\r\n        });\r\n\r\n    }\r\n    return (\r\n        <LoginContainer>\r\n            <LoginInnerContainer>\r\n                <img src=\"https://cdn.mos.cms.futurecdn.net/SDDw7CnuoUGax6x9mTo7dd.jpg\" alt=\"\"/>\r\n                <h1>Sign in to Legacy Network</h1>\r\n                <p>legacy.gideon.com</p>\r\n                <Button onClick={signIn}>Sign in with Google</Button>\r\n            </LoginInnerContainer>\r\n        </LoginContainer>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\nconst LoginContainer = styled.div`\r\nbackground-color: #f8f8f8;\r\nheight: 100vh;\r\ndisplay: grid;\r\nplace-items: center;\r\n  \r\n`\r\nconst LoginInnerContainer = styled.div`\r\npadding: 100px;\r\ntext-align: center;\r\nbackground-color: white;\r\nborder-radius: 10px;\r\nbox-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\r\n  >img{\r\n  object-fit: contain;\r\n  height: 100px;\r\n  margin-bottom: 40px;\r\n  }\r\n  >button{\r\n  margin-top: 50px;\r\n  text-transform: inherit !important;\r\n  background-color: #0a8d48;\r\n  color: white;\r\n  \r\n  }\r\n`","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Header.js",["148"],"import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport {auth, provider} from \"../app/firebase\";\r\n\r\nfunction Header(props) {\r\n    const [user] = useAuthState(auth);\r\n    return <HeaderContainer>\r\n        {/*Header Left*/}\r\n        <HeaderLeft>\r\n            <HeaderAvatar onClick={()=>auth.signOut()} src={user?.photoURL} alt={user?.displayName}/>\r\n            <AccessTimeIcon/>\r\n        </HeaderLeft>\r\n\r\n        {/*Header Search*/}\r\n\r\n        <HeaderSearch>\r\n            <SearchIcon/>\r\n            <input placeholder=\"Search MYCOMMUNITY\"/>\r\n\r\n        </HeaderSearch>\r\n\r\n\r\n        {/*Header Right*/}\r\n\r\n        <HeaderRight>\r\n            <HelpOutlineIcon/>\r\n        </HeaderRight>\r\n\r\n    </HeaderContainer>\r\n}\r\n\r\nexport default Header;\r\n\r\nconst HeaderContainer = styled.div`\r\n    display: flex;\r\n    position: fixed;\r\n    width: 100%;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 10px 0;\r\n    background-color: var(--slack-color);\r\n    color: white;\r\n    `;\r\nconst HeaderLeft = styled.div`\r\nflex: .3;\r\ndisplay: flex;\r\nmargin-left: 20px;\r\nalign-items: center;\r\n\r\n>.MuiSvgIcon-root{\r\nmargin-left: auto;\r\nmargin-right: 30px;\r\n}\r\n  \r\n`;\r\nconst HeaderAvatar = styled(Avatar)`\r\n  cursor: pointer;\r\n  :hover{\r\n  opacity: .8;\r\n  }\r\n  \r\n`;\r\nconst HeaderSearch = styled.div`\r\n  flex: .4;\r\n  opacity: 1;\r\n  border-radius: 6px;\r\n  background-color: #421f44;\r\n  text-align: center;\r\n  display: flex;\r\n  padding: 0 50px;\r\n  color: gray;\r\n  border: 1px gray solid;\r\n  \r\n  >input{\r\n  background-color: transparent;\r\n  border: none;\r\n  text-align: center;\r\n  min-width: 30vh;\r\n  outline: none;\r\n  color: white;\r\n  }\r\n`;\r\nconst HeaderRight = styled.div`\r\n  flex: .3;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  >.MuiSvgIcon-root{\r\n  margin-left: auto;\r\n  margin-right: 20px;\r\n  }\r\n`\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\appSlice.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\SidebarOption.js",["149","150","151","152","153","154","155","156","157","158"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatInput.js",["159"],"import React, {useRef, useState} from 'react';\r\nimport styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {auth, db} from '../app/firebase'\r\nimport firebase from \"firebase\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\n\r\nfunction ChatInput({channelName, channelId, chatRef}) {\r\n    const [input, setInput] = useState('');\r\n    const [user] = useAuthState(auth);\r\n    const allMessagesRef = db.collection('rooms').doc(channelId).collection('messages').orderBy('timestamp', 'asc');\r\n\r\n\r\n    const sendMessage = e => {\r\n        e.preventDefault();\r\n        if (input) {\r\n            if (!channelId) {\r\n                return false;\r\n            }\r\n\r\n            allMessagesRef.get().then((documentSnapshots)=> {\r\n                const lastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n\r\n\r\n                console.log('The document id be '+lastVisible?.id)\r\n\r\n                if (lastVisible?.data().user_id === user.uid) {\r\n\r\n                    db.collection('rooms')\r\n                        .doc(channelId).collection('messages')\r\n                        .add({\r\n                            user_id: user.uid,\r\n                            message: input,\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                            user: user.displayName,\r\n                            userImage: user.photoURL,\r\n                            likesCount: 0,\r\n\r\n\r\n\r\n                        }).then((rs) =>{\r\n                            console.log(rs.id)\r\n                        db.collection('rooms').doc(channelId).collection('messages').doc(rs.id).collection('reads')\r\n                            .doc(user.uid).set({\r\n                            read: true\r\n                        })\r\n\r\n\r\n\r\n                    });\r\n                }else{\r\n                    db.collection('rooms')\r\n                        .doc(channelId).collection('messages')\r\n                        .add({\r\n                            user_id: user.uid,\r\n                            message: input,\r\n                            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                            user: user.displayName,\r\n                            userImage: user.photoURL,\r\n                            likesCount: 0,\r\n\r\n                        });\r\n                }\r\n            });\r\n\r\n\r\n\r\n        }\r\n        chatRef.current.scrollIntoView({\r\n            behavior:'smooth',\r\n\r\n        });\r\n        setInput(\"\")\r\n\r\n    }\r\n    return (\r\n        <ChatInputContianer>\r\n            <form>\r\n                <input value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`}/>\r\n                <Button hidden type=\"submit\" onClick={sendMessage}>\r\n                    SEND\r\n                </Button>\r\n            </form>\r\n        </ChatInputContianer>\r\n    );\r\n}\r\n\r\nexport default ChatInput;\r\n\r\nconst ChatInputContianer = styled.div`\r\n  border-radius: 20px;\r\n  >form{\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  }\r\n  >form > input{\r\n  position: fixed;\r\n  width: 60%;\r\n  bottom: 30px;\r\n  border: 1px solid gray;\r\n  border-radius: 3px;\r\n  padding: 20px;\r\n  outline: none;\r\n  }\r\n  >form >Button{\r\n  bottom: 30px;\r\n  position: fixed;\r\n  display: none;\r\n  }\r\n`","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Message.js",["160","161","162","163","164","165"],"import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components'\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {auth, db} from \"../app/firebase\";\nimport {useSelector} from \"react-redux\";\nimport {selectRoomId} from \"../features/appSlice\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbDownAltIcon from \"@material-ui/icons/ThumbDownAlt\";\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport firebase from \"firebase\";\n\nimport {Arrow, useLayer} from \"react-laag\";\n\nimport {AnimatePresence, motion} from \"framer-motion\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport moment from \"moment\";\n\n\n\n\nfunction Message({message, timestamp, user, userImage, docId, user_id, firstMessage, showName}) {\n    const [userName] = useAuthState(auth);\n    const roomId = useSelector(selectRoomId);\n    const [style, setStyle] = useState({display: 'none'});\n    const [likesCount, setLikesCount] = useState(0);\n    const [like, setLike] = useState(false);\n    const [isMine, setIsMine] = useState(true);\n    //Toggler for hover\n    const [isOpen, setOpen] = useState(false);\n    let  [showimage, setShowImage] = useState(false)\n    const [timeSent, setTimeSent] = useState(null)\n\n    // helper function to close the menu\n    function close() {\n        setOpen(false);\n    }\n\n    //get the user ID of the currently logged in user\n\n    const loggedIn_user = userName.uid;\n\n    //Firestore collection references\n    const dbRef = db.collection('rooms')\n        .doc(roomId)\n        .collection('messages')\n        .doc(docId)\n    const likesRef = db.collection('rooms').doc(roomId).collection('messages').doc(docId).collection('likes')\n    const messagesRef = db.collection('rooms').doc(roomId).collection('messages').doc(docId)\n    const messageRef = db.collection('rooms').doc(roomId).collection('messages')\n    //const isFirstMessageByUser = !lastVisisble || las\n\n    //check next visible message\n\n    messagesRef.get().then((snap) => {\n        snap.data()?.user_id === loggedIn_user ? setIsMine(true) : setIsMine(false)\n\n\n\n        messageRef.startAfter()\n    })\n\n\n\n\n    //check if message is mine -- then float it right\n    const checkMyMessage = () => {\n        messagesRef.get().then((snap) => {\n            snap.data()?.user_id === loggedIn_user ? setIsMine(true) : setIsMine(false)\n\n        })\n    }\n    //check if messages are from same user\n    const checkRelated = () => {\n        messagesRef.get().then((snap) => {\n            if(snap.data()?.related === true){\n                setShowImage(true)\n\n\n            }else{\n                setShowImage(true)\n\n            }\n\n        })\n    }\n    //count likes\n    const countLikes = () =>{\n        db.collection('rooms')\n            .doc(roomId)\n            .collection('messages')\n            .doc(docId)?.get().then(querySnapshot => {\n\n\n                setLikesCount(querySnapshot.data()?.likesCount)\n                //console.log(`Number of likes = ${querySnapshot.data()?.likesCount}`);\n        })\n    }\n\n    //hover effect to display reactionbar\n    const { renderLayer, triggerProps, layerProps, arrowProps } = useLayer({\n        isOpen,\n        onOutsideClick: close, // close the menu when the user clicks outside\n        onDisappear: close, // close the menu when the menu gets scrolled out of sight\n        overflowContainer: false, // keep the menu positioned inside the container\n        auto: true, // automatically find the best placement\n        placement: \"top-end\", // we prefer to place the menu \"top-end\"\n        triggerOffset: -12, // keep some distance to the trigger\n        containerOffset: -16, // give the menu some room to breath relative to the container\n        arrowOffset: -16 // let the arrow have some room to breath also\n    });\n\n\n\n    const getDaysDiff = (start_date, end_date, date_format = 'YYYY-MM-DD') => {\n        const getDateAsArray = (date) => {\n            return moment(date.split(/\\D+/), date_format);\n        }\n        return getDateAsArray(end_date).diff(getDateAsArray(start_date), 'days') + 1;\n    }\n\n\n\n    useEffect(() => {\n\n\n        db.collection('rooms')\n            .doc(roomId)\n            .collection('messages')\n            .doc(docId).collection('likes')?.doc(userName.uid).get().then(querySnapshot => {\n            querySnapshot.data()?.like === 'liked' ? setLike(true) : setLike(false)\n        })\n\n\n\n        //check the last added message\n\n\n        checkMyMessage();\n        countLikes();\n\n\n\n\n\n\n    }, []);\n\n   // checkRelated()\n\n\n\n\n\n    return (\n        <>\n\n\n            <MessageContainer\n\n                /*Hover effects for each message*/\n                onClick={e => {\n                    setStyle({display: 'block'});\n\n                }}\n                onMouseLeave={e => {\n                    setStyle({display: 'none'})\n                }}\n\n                isMine={isMine}\n            >\n\n                {/*Load Image here*/}\n\n                {showName ? <img src={userImage} alt=\"Legacy\" isMine={isMine}/> : <HiddenImg/> }\n\n\n\n                <p> </p>\n                <MessagePositionHolder\n                    {...triggerProps}\n                    onClick={e => {\n                        setOpen(true)\n                    }\n\n                    }\n                    onMouseLeave={e => {\n                        setOpen(!isOpen)\n\n                    }}\n\n                    isMine={isMine}\n\n                >\n\n\n\n                    {/*Format and display the message*/}\n                    <MessageInfo>\n\n                        <div>\n\n                            <h4>\n                                {!isMine && showName ? <>{user} <span>{getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 1 ? `Today at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                    getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 2 ? `Yesterday at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                    `${moment(timestamp?.toDate()).format(\"DD/MM HH:mm\")}`}</span></> :<><span>{getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 1 ? `Today at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                    getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 2 ? `Yesterday at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                        `${moment(timestamp?.toDate()).format(\"DD/MM HH:mm\")}`}</span></>}\n\n                            </h4>\n\n                            {userName.uid  === user_id ?\n                                <MessageDeleter userName={user}><h3 onClick={() => {\n                                    messagesRef.delete()\n\n\n                                }}><strong>...</strong></h3></MessageDeleter>\n                                :\n                                null\n                            }\n\n\n\n                        </div>\n\n                        <p>{message}</p>\n\n\n                        <ReactionBar>\n\n                            {like ? <ThumbUpIcon/> :\n                                likesCount > 0 ?\n                                <ThumbUpOutlinedIcon/> : null}\n\n                            {likesCount > 0 ? <h3>{likesCount}</h3> : null }\n\n\n                        </ReactionBar>\n                    </MessageInfo>\n\n                </MessagePositionHolder>\n                {renderLayer(\n                    <AnimatePresence>\n                        {isOpen && (\n                            <motion.ul {...layerProps}>\n                                <EmojiBar style={style}\n                                >\n                                    <div>\n                                        <LikePackage onClick={() => {\n\n                                            const isLiked = () => {\n                                                likesRef?.doc(userName.uid).get().then(querySnapshot => {\n                                                    querySnapshot.data()?.like === 'liked' ? setLike(true) : setLike(false)\n                                                })\n                                            };\n                                            isLiked();\n                                            console.log(like)\n                                            console.log(`user id is ${userName.uid}`)\n\n                                            const u_id = userName.uid;\n                                            if (!like){\n\n\n                                                likesRef.doc(u_id)\n                                                    .set({\n\n                                                        like: 'liked',\n                                                    })\n                                                    .then(() => {\n                                                        dbRef.update({\n                                                            likesCount: likesCount+1\n                                                        })\n\n                                                    }).catch(error => {\n                                                    console.log(error.getMessage)\n                                                })\n                                            }\n                                            else {\n                                                likesRef.doc(u_id)\n                                                    .update({\n\n                                                        like: firebase.firestore.FieldValue.delete()\n\n                                                    })\n                                                    .then(() => {\n                                                        dbRef.update({\n                                                            likesCount: likesCount-1\n                                                        })\n                                                    }).catch(error => {\n                                                    console.log(error.getMessage)\n                                                })\n\n                                            }\n\n                                        }}>{like ?\n                                            <ThumbUpIcon/> : <ThumbDownAltIcon/>}\n\n                                        </LikePackage>\n\n                                        <EmojiEmotionsIcon/>\n\n                                        {userName.uid === user_id ? <DeleteIcon onClick={() => {\n\n                                            messagesRef.delete()\n\n\n                                        }} /> : null}\n\n                                    </div>\n\n                                </EmojiBar>\n                                <Arrow {...arrowProps} />\n                            </motion.ul>\n                        )}\n                    </AnimatePresence>\n                )}\n            </MessageContainer>\n\n        </>\n    );\n}\n\nexport default Message;\nconst MessageContainer =  styled.div`\ndisplay: flex;\nalign-items: center;\npadding: ${p=>p.showimage ? '6px' : '2px'};\njustify-content: ${p => p.isMine ? 'space-between' : 'left'};\n>img{\nheight: 50px;\nborder-radius: 8px;\ndisplay: ${p=>p.isMine ? 'none' : 'block'};\n\n\n}\n`\nconst HiddenImg = styled.div`\n\nmargin-left: 50px;\n\nvisibility: hidden;\n\n`\nconst MessageInfo =  styled.div`\n    \n  >p{\n  color: black;\n  z-index: 99;\n  }\n  >h4{\n  color: black;\n  z-index: 99;\n  }\n\ndiv{\nalign-content: space-between;\ndisplay: flex;\nalign-items: center;\n>h4 > span{\ncolor: black;\nfont-weight: 300;\nmargin-left: 7px;\nfont-size: 14px;\nfloat: right;\n\n}\n\n}\n`\nconst MessageDeleter = styled.div`\n  >h3{\nfloat: right;\ntop: 0;\n\ndisplay: ${p=>p.userName ? 'center': 'none'};\n}\n`\nconst EmojiBar = styled.div`\n  height: 30px;\n  display: flex;\n  width: 100px;\n  border: 1px solid var(--slack-color);\n  float: right;\n  border-radius: 5px;\n  >div{\n  display: flex;\n  margin-left: 5px;\n  \n  justify-content: space-between;\n  align-items: center;\n  >.MuiSvgIcon-root{\n  font-size: 20px;\n  color: var(--slack-color);\n  :hover{\n    font-size: 30px;\n  }\n  }\n  }\n`\n\nconst LikePackage = styled.div`\n\n>.MuiSvgIcon-root{\n  color: var(--slack-color);\n  :hover{\n  font-size: 30px;\n  }\n  }\n  font-size: 20px;\n  cursor: pointer;\n  \n`\nconst ReactionBar = styled.div`\n  >.MuiSvgIcon-root{\n  color: var(--slack-color);\n  }\n  float: right;\n    \n`\nconst MessagePositionHolder = styled.div`\n  display: flex;\nalign-items: center;\npadding-top: 5px;\npadding-left: 5px;\npadding-right: 20px;\npadding-bottom: 7px;\nmargin-left: 5px;\nbackground: ${p => p.isMine ? '#b1cdfa' : 'lightgray'};\nmax-width: 50%;\n>img{\nheight: 50px;\nborder-radius: 8px;\n}\n  opacity: .5;\n\n  align-self: end;\n  border-radius: 7px;\n  border: 1px solid #340e36;\n`\n\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Popovers.js",[],["166","167"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatEngine.js",["168","169","170","171"],"import React, {useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport TestArea from \"./TestArea\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport {db} from \"../app/firebase\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectRoomId} from \"../features/appSlice\";\r\n\r\nfunction ChatEngine(props) {\r\n    const roomId = useSelector(selectRoomId)\r\n    const [messages, setMessages] = useState([])\r\n    const [roomMessages, loading] = useCollection(\r\n        '2ATXydVpGG7nsudrYDyX' && db.collection('rooms')\r\n            .doc('2ATXydVpGG7nsudrYDyX')\r\n            .collection('messages')\r\n            .orderBy('timestamp', 'asc'))\r\n    roomMessages?.docs.map((doc) => {\r\n        setMessages(doc.get('user_id'))\r\n    })\r\n    return (\r\n        <ChatsEngine\r\n        renderChatFeed={()=><TestArea messages/>}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ChatEngine;\r\n\r\nconst ChatsEngine = styled.div`\r\n  height: 100vh;\r\n  \r\n`\r\n\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\MyMessage.js",["172","173","174","175"],"import React from 'react';\r\n\r\nimport firebase from 'firebase';\r\nimport {auth, firebaseApp} from \"../app/firebase\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\n\r\n\r\nexport const initializeFirebase = () => {\r\n    firebase.initializeApp({\r\n        messagingSenderId: '424660840094' // tvoj sender id\r\n    }, \"Slack-clone\");\r\n\r\n}\r\n\r\nexport const askForPermissioToReceiveNotifications = async () => {\r\n\r\n    try {\r\n\r\n        const messaging = firebase.messaging();\r\n\r\n        await messaging.requestPermission();\r\n        const token = await messaging.getToken();\r\n\r\n        console.log('user token: ', token);\r\n\r\n        return token;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TheirMessages.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\TextInput.js",["176","177"],"import React, {\r\n    ReactElement,\r\n    useCallback,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from 'react';\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport Editor from '@draft-js-plugins/editor';\r\nimport createMentionPlugin, {\r\n    defaultSuggestionsFilter,\r\n} from '@draft-js-plugins/mention';\r\nimport editorStyles from './editorStyles.module.css';\r\nimport mentions from './Mentions';\r\nimport '@draft-js-plugins/mention/lib/plugin.css';\r\n\r\nexport default function TextInput() {\r\n    const ref = useRef<Editor>(null);\r\n    const [editorState, setEditorState] = useState(() =>\r\n        EditorState.createEmpty()\r\n    );\r\n    const [open, setOpen] = useState(false);\r\n    const [suggestions, setSuggestions] = useState(mentions);\r\n\r\n    const { MentionSuggestions, plugins } = useMemo(() => {\r\n        const mentionPlugin = createMentionPlugin();\r\n        // eslint-disable-next-line no-shadow\r\n        const { MentionSuggestions } = mentionPlugin;\r\n        // eslint-disable-next-line no-shadow\r\n        const plugins = [mentionPlugin];\r\n        return { plugins, MentionSuggestions };\r\n    }, []);\r\n\r\n    const onOpenChange = useCallback((_open: boolean) => {\r\n        setOpen(_open);\r\n    }, []);\r\n    const onSearchChange = useCallback(({ value }: { value: string }) => {\r\n        setSuggestions(defaultSuggestionsFilter(value, mentions));\r\n    }, []);\r\n    //console.log(mentions)\r\n\r\n    return (\r\n        <div>\r\n        <div\r\n            className={editorStyles.editor}\r\n            onClick={() => {\r\n                //ref.current.focus();\r\n            }}\r\n        >\r\n            <Editor\r\n\r\n                editorState={editorState}\r\n                onChange={setEditorState}\r\n                plugins={plugins}\r\n               // ref={ref}\r\n            />\r\n            <MentionSuggestions\r\n                open={open}\r\n                onOpenChange={onOpenChange}\r\n                suggestions={suggestions}\r\n                onSearchChange={onSearchChange}\r\n                onAddMention={() => {\r\n\r\n                    // get the mention object selected\r\n                }}\r\n            />\r\n        </div>\r\n            <div>\r\n                <button onClick={() => {\r\n                    const contentState = editorState.getCurrentContent();\r\n                    const raw = convertToRaw(contentState);\r\n\r\n                    let mentionedUsers = [];\r\n                    for (let key in raw.entityMap){\r\n                        const ent = raw.entityMap[key];\r\n                        if (ent.type === 'mention'){\r\n                            mentionedUsers.push(ent.data.mention)\r\n                        }\r\n                    }\r\n                    console.log(mentionedUsers)\r\n                }}>Extract Info</button>\r\n            </div>\r\n</div>\r\n    );\r\n}\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\Mentions.js",["178"],"import {db} from \"../../app/firebase\";\r\n\r\nlet mentions = [\r\n    /*{\r\n        name: \"Matthew Russell\",\r\n        link: \"https://twitter.com/mrussell247\",\r\n        avatar:\r\n            \"https://pbs.twimg.com/profile_images/517863945/mattsailing_400x400.jpg\",\r\n        userId: 13\r\n    },\r\n    {\r\n        name: \"Julian Krispel-Samsel\",\r\n        link: \"https://twitter.com/juliandoesstuff\",\r\n        avatar: \"https://avatars2.githubusercontent.com/u/1188186?v=3&s=400\"\r\n    },\r\n    {\r\n        name: \"Jyoti Puri\",\r\n        link: \"https://twitter.com/jyopur\",\r\n        avatar: \"https://avatars0.githubusercontent.com/u/2182307?v=3&s=400\"\r\n    },\r\n    {\r\n        name: \"Max Stoiber\",\r\n        link: \"https://twitter.com/mxstbr\",\r\n        avatar:\r\n            \"https://pbs.twimg.com/profile_images/763033229993574400/6frGyDyA_400x400.jpg\"\r\n    },\r\n    {\r\n        name: \"Nik Graf\",\r\n        link: \"https://twitter.com/nikgraf\",\r\n        avatar: \"https://avatars0.githubusercontent.com/u/223045?v=3&s=400\"\r\n    },\r\n    {\r\n        name: \"Pascal Brandt\",\r\n        link: \"https://twitter.com/psbrandt\",\r\n        avatar:\r\n            \"https://pbs.twimg.com/profile_images/688487813025640448/E6O6I011_400x400.png\"\r\n    }*/\r\n];\r\n\r\ndb.collection('users').get().then((doc) => {\r\n    doc.docs.map((docment) => {\r\n        mentions.push({\r\n            name: docment.get(\"username\"),\r\n            link: \"https://twitter.com/nikgraf\",\r\n            avatar: \"https://avatars0.githubusercontent.com/u/223045?v=3&s=400\"\r\n        })\r\n    })\r\n})\r\n//console.log(mentions)\r\n\r\nexport default mentions;","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\firestoreSlice.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArena.js",["179","180","181","182","183","184","185","186","187","188","189","190"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Arena Playground\\List.js",["191","192"],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":9,"column":5,"nodeType":"199","messageId":"200","endLine":9,"endColumn":9},{"ruleId":"197","severity":1,"message":"201","line":19,"column":8,"nodeType":"199","messageId":"200","endLine":19,"endColumn":18},{"ruleId":"197","severity":1,"message":"202","line":20,"column":8,"nodeType":"199","messageId":"200","endLine":20,"endColumn":14},{"ruleId":"197","severity":1,"message":"203","line":21,"column":9,"nodeType":"199","messageId":"200","endLine":21,"endColumn":46},{"ruleId":"197","severity":1,"message":"204","line":22,"column":9,"nodeType":"199","messageId":"200","endLine":22,"endColumn":23},{"ruleId":"197","severity":1,"message":"205","line":23,"column":9,"nodeType":"199","messageId":"200","endLine":23,"endColumn":20},{"ruleId":"197","severity":1,"message":"206","line":24,"column":9,"nodeType":"199","messageId":"200","endLine":24,"endColumn":21},{"ruleId":"197","severity":1,"message":"207","line":25,"column":9,"nodeType":"199","messageId":"200","endLine":25,"endColumn":17},{"ruleId":"197","severity":1,"message":"208","line":32,"column":12,"nodeType":"199","messageId":"200","endLine":32,"endColumn":18},{"ruleId":"197","severity":1,"message":"209","line":34,"column":12,"nodeType":"199","messageId":"200","endLine":34,"endColumn":21},{"ruleId":"197","severity":1,"message":"210","line":34,"column":23,"nodeType":"199","messageId":"200","endLine":34,"endColumn":35},{"ruleId":"197","severity":1,"message":"211","line":19,"column":8,"nodeType":"199","messageId":"200","endLine":19,"endColumn":12},{"ruleId":"197","severity":1,"message":"212","line":23,"column":22,"nodeType":"199","messageId":"200","endLine":23,"endColumn":29},{"ruleId":"197","severity":1,"message":"213","line":23,"column":31,"nodeType":"199","messageId":"200","endLine":23,"endColumn":36},{"ruleId":"197","severity":1,"message":"214","line":25,"column":27,"nodeType":"199","messageId":"200","endLine":25,"endColumn":43},{"ruleId":"197","severity":1,"message":"215","line":26,"column":12,"nodeType":"199","messageId":"200","endLine":26,"endColumn":17},{"ruleId":"197","severity":1,"message":"216","line":26,"column":19,"nodeType":"199","messageId":"200","endLine":26,"endColumn":27},{"ruleId":"197","severity":1,"message":"209","line":29,"column":12,"nodeType":"199","messageId":"200","endLine":29,"endColumn":21},{"ruleId":"197","severity":1,"message":"210","line":29,"column":23,"nodeType":"199","messageId":"200","endLine":29,"endColumn":35},{"ruleId":"197","severity":1,"message":"217","line":31,"column":12,"nodeType":"199","messageId":"200","endLine":31,"endColumn":19},{"ruleId":"197","severity":1,"message":"218","line":32,"column":12,"nodeType":"199","messageId":"200","endLine":32,"endColumn":26},{"ruleId":"197","severity":1,"message":"219","line":32,"column":28,"nodeType":"199","messageId":"200","endLine":32,"endColumn":45},{"ruleId":"197","severity":1,"message":"220","line":33,"column":12,"nodeType":"199","messageId":"200","endLine":33,"endColumn":18},{"ruleId":"197","severity":1,"message":"221","line":33,"column":20,"nodeType":"199","messageId":"200","endLine":33,"endColumn":29},{"ruleId":"197","severity":1,"message":"222","line":1,"column":16,"nodeType":"199","messageId":"200","endLine":1,"endColumn":25},{"ruleId":"197","severity":1,"message":"223","line":1,"column":27,"nodeType":"199","messageId":"200","endLine":1,"endColumn":33},{"ruleId":"197","severity":1,"message":"224","line":1,"column":35,"nodeType":"199","messageId":"200","endLine":1,"endColumn":43},{"ruleId":"197","severity":1,"message":"225","line":5,"column":15,"nodeType":"199","messageId":"200","endLine":5,"endColumn":17},{"ruleId":"197","severity":1,"message":"226","line":11,"column":11,"nodeType":"199","messageId":"200","endLine":11,"endColumn":17},{"ruleId":"197","severity":1,"message":"208","line":12,"column":12,"nodeType":"199","messageId":"200","endLine":12,"endColumn":18},{"ruleId":"197","severity":1,"message":"227","line":13,"column":8,"nodeType":"199","messageId":"200","endLine":13,"endColumn":17},{"ruleId":"197","severity":1,"message":"228","line":19,"column":12,"nodeType":"199","messageId":"200","endLine":19,"endColumn":25},{"ruleId":"197","severity":1,"message":"229","line":19,"column":27,"nodeType":"199","messageId":"200","endLine":19,"endColumn":44},{"ruleId":"197","severity":1,"message":"208","line":29,"column":12,"nodeType":"199","messageId":"200","endLine":29,"endColumn":18},{"ruleId":"197","severity":1,"message":"230","line":30,"column":11,"nodeType":"199","messageId":"200","endLine":30,"endColumn":22},{"ruleId":"197","severity":1,"message":"231","line":36,"column":16,"nodeType":"199","messageId":"200","endLine":36,"endColumn":30},{"ruleId":"197","severity":1,"message":"232","line":84,"column":9,"nodeType":"199","messageId":"200","endLine":84,"endColumn":15},{"ruleId":"197","severity":1,"message":"233","line":5,"column":9,"nodeType":"199","messageId":"200","endLine":5,"endColumn":22},{"ruleId":"197","severity":1,"message":"234","line":8,"column":15,"nodeType":"199","messageId":"200","endLine":8,"endColumn":23},{"ruleId":"197","severity":1,"message":"235","line":6,"column":9,"nodeType":"199","messageId":"200","endLine":6,"endColumn":18},{"ruleId":"197","severity":1,"message":"236","line":36,"column":12,"nodeType":"199","messageId":"200","endLine":36,"endColumn":20},{"ruleId":"197","severity":1,"message":"212","line":36,"column":22,"nodeType":"199","messageId":"200","endLine":36,"endColumn":29},{"ruleId":"197","severity":1,"message":"213","line":36,"column":31,"nodeType":"199","messageId":"200","endLine":36,"endColumn":36},{"ruleId":"197","severity":1,"message":"237","line":41,"column":11,"nodeType":"199","messageId":"200","endLine":41,"endColumn":24},{"ruleId":"197","severity":1,"message":"238","line":42,"column":12,"nodeType":"199","messageId":"200","endLine":42,"endColumn":18},{"ruleId":"239","severity":1,"message":"240","line":95,"column":42,"nodeType":"241","messageId":"242","endLine":95,"endColumn":44},{"ruleId":"243","severity":1,"message":"244","line":114,"column":8,"nodeType":"245","endLine":114,"endColumn":10,"suggestions":"246"},{"ruleId":"197","severity":1,"message":"247","line":126,"column":13,"nodeType":"199","messageId":"200","endLine":126,"endColumn":21},{"ruleId":"239","severity":1,"message":"240","line":139,"column":38,"nodeType":"241","messageId":"242","endLine":139,"endColumn":40},{"ruleId":"197","severity":1,"message":"223","line":1,"column":16,"nodeType":"199","messageId":"200","endLine":1,"endColumn":22},{"ruleId":"197","severity":1,"message":"233","line":18,"column":9,"nodeType":"199","messageId":"200","endLine":18,"endColumn":22},{"ruleId":"197","severity":1,"message":"248","line":33,"column":11,"nodeType":"199","messageId":"200","endLine":33,"endColumn":20},{"ruleId":"197","severity":1,"message":"249","line":34,"column":12,"nodeType":"199","messageId":"200","endLine":34,"endColumn":20},{"ruleId":"197","severity":1,"message":"250","line":34,"column":22,"nodeType":"199","messageId":"200","endLine":34,"endColumn":33},{"ruleId":"197","severity":1,"message":"251","line":76,"column":11,"nodeType":"199","messageId":"200","endLine":76,"endColumn":23},{"ruleId":"243","severity":1,"message":"252","line":149,"column":8,"nodeType":"245","endLine":149,"endColumn":10,"suggestions":"253"},{"ruleId":"193","replacedBy":"254"},{"ruleId":"195","replacedBy":"255"},{"ruleId":"197","severity":1,"message":"226","line":10,"column":11,"nodeType":"199","messageId":"200","endLine":10,"endColumn":17},{"ruleId":"197","severity":1,"message":"256","line":11,"column":12,"nodeType":"199","messageId":"200","endLine":11,"endColumn":20},{"ruleId":"197","severity":1,"message":"212","line":12,"column":26,"nodeType":"199","messageId":"200","endLine":12,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":17,"column":34,"nodeType":"241","messageId":"242","endLine":17,"endColumn":36},{"ruleId":"197","severity":1,"message":"257","line":1,"column":8,"nodeType":"199","messageId":"200","endLine":1,"endColumn":13},{"ruleId":"197","severity":1,"message":"258","line":4,"column":9,"nodeType":"199","messageId":"200","endLine":4,"endColumn":13},{"ruleId":"197","severity":1,"message":"259","line":4,"column":15,"nodeType":"199","messageId":"200","endLine":4,"endColumn":26},{"ruleId":"197","severity":1,"message":"260","line":5,"column":9,"nodeType":"199","messageId":"200","endLine":5,"endColumn":21},{"ruleId":"197","severity":1,"message":"261","line":2,"column":5,"nodeType":"199","messageId":"200","endLine":2,"endColumn":17},{"ruleId":"197","severity":1,"message":"262","line":18,"column":11,"nodeType":"199","messageId":"200","endLine":18,"endColumn":14},{"ruleId":"239","severity":1,"message":"240","line":41,"column":28,"nodeType":"241","messageId":"242","endLine":41,"endColumn":30},{"ruleId":"197","severity":1,"message":"263","line":1,"column":16,"nodeType":"199","messageId":"200","endLine":1,"endColumn":29},{"ruleId":"197","severity":1,"message":"264","line":1,"column":31,"nodeType":"199","messageId":"200","endLine":1,"endColumn":41},{"ruleId":"197","severity":1,"message":"265","line":10,"column":12,"nodeType":"199","messageId":"200","endLine":10,"endColumn":20},{"ruleId":"197","severity":1,"message":"208","line":11,"column":12,"nodeType":"199","messageId":"200","endLine":11,"endColumn":18},{"ruleId":"197","severity":1,"message":"266","line":12,"column":12,"nodeType":"199","messageId":"200","endLine":12,"endColumn":19},{"ruleId":"197","severity":1,"message":"267","line":12,"column":21,"nodeType":"199","messageId":"200","endLine":12,"endColumn":31},{"ruleId":"197","severity":1,"message":"268","line":13,"column":12,"nodeType":"199","messageId":"200","endLine":13,"endColumn":19},{"ruleId":"197","severity":1,"message":"269","line":13,"column":21,"nodeType":"199","messageId":"200","endLine":13,"endColumn":31},{"ruleId":"197","severity":1,"message":"270","line":14,"column":9,"nodeType":"199","messageId":"200","endLine":14,"endColumn":13},{"ruleId":"197","severity":1,"message":"271","line":40,"column":11,"nodeType":"199","messageId":"200","endLine":40,"endColumn":28},{"ruleId":"197","severity":1,"message":"272","line":92,"column":7,"nodeType":"199","messageId":"200","endLine":92,"endColumn":24},{"ruleId":"197","severity":1,"message":"273","line":102,"column":7,"nodeType":"199","messageId":"200","endLine":102,"endColumn":25},{"ruleId":"239","severity":1,"message":"240","line":34,"column":37,"nodeType":"241","messageId":"242","endLine":34,"endColumn":39},{"ruleId":"243","severity":1,"message":"274","line":43,"column":8,"nodeType":"245","endLine":43,"endColumn":10,"suggestions":"275"},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ChatEngine' is defined but never used.","'Button' is defined but never used.","'askForPermissioToReceiveNotifications' is defined but never used.","'firestoreBadge' is defined but never used.","'useSelector' is defined but never used.","'selectRoomId' is defined but never used.","'setBadge' is defined but never used.","'userID' is assigned a value but never used.","'hideBadge' is assigned a value but never used.","'setHideBadge' is assigned a value but never used.","'List' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'setIsSidebarOpen' is assigned a value but never used.","'width' is assigned a value but never used.","'setWidth' is assigned a value but never used.","'cinemas' is assigned a value but never used.","'selectedCinema' is assigned a value but never used.","'setSelectedCinema' is assigned a value but never used.","'movies' is assigned a value but never used.","'setMovies' is assigned a value but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'db' is defined but never used.","'roomId' is assigned a value but never used.","'MyMessage' is defined but never used.","'renderMessage' is assigned a value but never used.","'setRenderMessages' is assigned a value but never used.","'messagesRef' is assigned a value but never used.","'allMessagesRef' is assigned a value but never used.","'allMsg' is assigned a value but never used.","'useCollection' is defined but never used.","'provider' is defined but never used.","'showBadge' is defined but never used.","'channels' is assigned a value but never used.","'readReciptRef' is assigned a value but never used.","'isMine' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'chatMessages.message', 'readsRef', 'title', and 'userID.uid'. Either include them or remove the dependency array.","ArrayExpression",["278"],"'msgArray' is assigned a value but never used.","'showimage' is assigned a value but never used.","'timeSent' is assigned a value but never used.","'setTimeSent' is assigned a value but never used.","'checkRelated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkMyMessage', 'countLikes', 'docId', 'roomId', and 'userName.uid'. Either include them or remove the dependency array.",["279"],["276"],["277"],"'messages' is assigned a value but never used.","'React' is defined but never used.","'auth' is defined but never used.","'firebaseApp' is defined but never used.","'useAuthState' is defined but never used.","'ReactElement' is defined but never used.","'ref' is assigned a value but never used.","'createContext' is defined but never used.","'useContext' is defined but never used.","'roomsRef' is assigned a value but never used.","'hasRead' is assigned a value but never used.","'setHasRead' is assigned a value but never used.","'lastMsg' is assigned a value but never used.","'setLastMsg' is assigned a value but never used.","'msgs' is assigned a value but never used.","'timestampToString' is assigned a value but never used.","'TestAreaContainer' is assigned a value but never used.","'TestAreaContainers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatMessages.message', 'name', 'readReciptRef', and 'readsRef'. Either include them or remove the dependency array.",["280"],"no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},"Update the dependencies array to be: [chatMessages.message, readsRef, title, userID.uid]",{"range":"287","text":"288"},"Update the dependencies array to be: [checkMyMessage, countLikes, docId, roomId, userName.uid]",{"range":"289","text":"290"},"Update the dependencies array to be: [chatMessages.message, name, readReciptRef, readsRef]",{"range":"291","text":"292"},[3634,3636],"[chatMessages.message, readsRef, title, userID.uid]",[4620,4622],"[checkMyMessage, countLikes, docId, roomId, userName.uid]",[1292,1294],"[chatMessages.message, name, readReciptRef, readsRef]"]