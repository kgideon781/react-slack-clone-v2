[{"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\index.js":"1","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\App.js":"2","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\serviceWorker.js":"3","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\store.js":"4","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\MyMessage.js":"5","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\firebase.js":"6","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Chat.js":"7","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArea.js":"8","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Sidebar.js":"9","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Header.js":"10","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Login.js":"11","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatEngine.js":"12","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArena.js":"13","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\firestoreSlice.js":"14","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\appSlice.js":"15","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\SidebarOption.js":"16","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Message.js":"17","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatInput.js":"18","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\TextInput.js":"19","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Arena Playground\\List.js":"20","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\Mentions.js":"21"},{"size":727,"mtime":1617803060362,"results":"22","hashOfConfig":"23"},{"size":4042,"mtime":1620028852063,"results":"24","hashOfConfig":"23"},{"size":5141,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":272,"mtime":1617901769466,"results":"26","hashOfConfig":"23"},{"size":646,"mtime":1619682784747,"results":"27","hashOfConfig":"23"},{"size":590,"mtime":1619265351960,"results":"28","hashOfConfig":"23"},{"size":5884,"mtime":1620028269966,"results":"29","hashOfConfig":"23"},{"size":470,"mtime":1619682670175,"results":"30","hashOfConfig":"23"},{"size":3998,"mtime":1619682638771,"results":"31","hashOfConfig":"23"},{"size":2297,"mtime":1619018506829,"results":"32","hashOfConfig":"23"},{"size":1801,"mtime":1617712641529,"results":"33","hashOfConfig":"23"},{"size":961,"mtime":1617357279026,"results":"34","hashOfConfig":"23"},{"size":2996,"mtime":1619763988193,"results":"35","hashOfConfig":"23"},{"size":725,"mtime":1617902744789,"results":"36","hashOfConfig":"23"},{"size":662,"mtime":1617901329392,"results":"37","hashOfConfig":"23"},{"size":3900,"mtime":1620028924223,"results":"38","hashOfConfig":"23"},{"size":13916,"mtime":1619696211000,"results":"39","hashOfConfig":"23"},{"size":2768,"mtime":1620028081369,"results":"40","hashOfConfig":"23"},{"size":6711,"mtime":1619682735711,"results":"41","hashOfConfig":"23"},{"size":126,"mtime":1619112271969,"results":"42","hashOfConfig":"23"},{"size":1567,"mtime":1617706185724,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1is146h",{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\index.js",[],["97","98"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\App.js",["99","100","101"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\serviceWorker.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\store.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\MyMessage.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\app\\firebase.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Chat.js",["102","103","104","105","106","107","108","109","110","111","112","113","114"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArea.js",["115","116","117"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport TextInput from \"./Test Environment/TextInput\";\r\nimport {askForPermissioToReceiveNotifications} from \"./MyMessage\";\r\nimport Button from \"reactstrap/es/Button\";\r\n\r\n\r\nfunction TestArea(props) {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <TextInput/>\r\n\r\n            <Button onClick={askForPermissioToReceiveNotifications}>Ask for Permission</Button>\r\n\r\n        </>\r\n    )\r\n\r\n\r\n}\r\nexport default TestArea;\r\n\r\n\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Sidebar.js",["118"],"import React, {useEffect, useState} from 'react';\r\nimport styled from \"styled-components\"\r\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\"\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport InsertCommentIcon from \"@material-ui/icons/InsertComment\";\r\nimport DraftsIcon from \"@material-ui/icons/Drafts\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\r\nimport AppIcon from \"@material-ui/icons/Apps\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport {auth, db} from \"../app/firebase\";\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\n\r\n\r\n\r\nfunction Sidebar() {\r\n    const [channels] = useCollection(db.collection('rooms'));\r\n    const [userID] = useAuthState(auth);\r\n    const currentUser = userID.displayName;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    //console.log('last message')\r\n    //console.log(lastMsg)\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <SidebarContainer\r\n\r\n            >\r\n              <SidebarHeader>\r\n                    <SidebarInfo>\r\n                        <h2>GIDDY'S SLACK CLONE</h2>\r\n                        <h3>\r\n                            <FiberManualRecordIcon/>\r\n                            {currentUser}\r\n                        </h3>\r\n                    </SidebarInfo>\r\n                    <CreateIcon/>\r\n                </SidebarHeader>\r\n                <SidebarOption Icon={InsertCommentIcon} title=\"Threads\"/>\r\n                <SidebarOption Icon={InboxIcon} title=\"Mentions & reactions\"/>\r\n                <SidebarOption Icon={DraftsIcon} title=\"Saved items\"/>\r\n                <SidebarOption Icon={BookmarkBorderIcon} title=\"Channel browser\"/>\r\n                <SidebarOption Icon={PeopleAltIcon} title=\"People & user groups\"/>\r\n                <SidebarOption Icon={AppIcon} title=\"Apps\"/>\r\n                <SidebarOption Icon={FileCopyIcon} title=\"File Browser\"/>\r\n                <SidebarOption Icon={ExpandLessIcon} title=\"Show less\"/>\r\n\r\n                <hr/>\r\n                <SidebarOption Icon={ExpandMoreIcon} title=\"Channels\"/>\r\n\r\n                <hr/>\r\n                <SidebarOption Icon={AddIcon} addChannelOption title=\"Add Channels\"/>\r\n\r\n\r\n                {channels?.docs.map((doc) => (\r\n\r\n                    <SidebarOption\r\n                        key={doc.id}\r\n                        id={doc.id}\r\n                        title={doc.data().name}\r\n                        user_id={userID.uid}\r\n\r\n                    />\r\n\r\n\r\n                ))}\r\n            </SidebarContainer>\r\n        )\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Sidebar;\r\n\r\nconst SidebarContainer = styled.div`\r\n  background-color: var(--slack-color);\r\n  color: white;\r\n  border-top: 1px solid #49274b;\r\n  margin-top: 60px;\r\n  overflow-y: scroll;  \r\n  >hr{\r\n  border: 1px solid #49274b;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  \r\n  }\r\n  ::-webkit-scrollbar {\r\n    width: 0;  /* Remove scrollbar space */\r\n    background: transparent;  /* Optional: just make scrollbar invisible */\r\n}\r\n`\r\n\r\nconst SidebarHeader = styled.div`\r\n  display: flex;\r\n  border-bottom: 1px solid #49274b;\r\n  padding: 13px;\r\n  left: -100%;\r\n  \r\n  >.MuiSvgIcon-root{\r\n  padding: 8px;\r\n  color: #49274b;\r\n  font-size: 18px;\r\n  background-color: white;\r\nborder-radius: 50%;  \r\n  }\r\n\r\n`\r\nconst SidebarInfo = styled.div`\r\n  flex: 1;\r\n  >h2{\r\n  font-size: 15px;\r\n  font-weight: 900;\r\n  margin-bottom: 5px;\r\n  }\r\n  >h3{\r\n  display: flex;\r\n  font-size: 13px;\r\n  font-weight: 400;\r\n  align-items: center;\r\n  }\r\n  \r\n  >h3 > .MuiSvgIcon-root{\r\n  font-size: 14px;\r\n  margin-top: 1px;\r\n  margin-right: 2px;\r\n  color: green;\r\n  }\r\n  \r\n`\r\n\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Header.js",["119","120","121"],"import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Cancel from '@material-ui/icons/Cancel';\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport {auth, provider} from \"../app/firebase\";\r\nimport {enterRoom} from \"../features/appSlice\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nfunction Header(props) {\r\n    const [user] = useAuthState(auth);\r\n    const dispatch = useDispatch();\r\n    return <HeaderContainer>\r\n        {/*Header Left*/}\r\n        <HeaderLeft>\r\n            <HeaderAvatar onClick={()=>auth.signOut()} src={user?.photoURL} alt={user?.displayName}/>\r\n            <AccessTimeIcon/>\r\n        </HeaderLeft>\r\n\r\n        {/*Header Search*/}\r\n\r\n        <HeaderSearch>\r\n            <SearchIcon/>\r\n            <input placeholder=\"Search MYCOMMUNITY\"/>\r\n\r\n        </HeaderSearch>\r\n\r\n\r\n        {/*Header Right*/}\r\n\r\n        <HeaderRight>\r\n            <HelpOutlineIcon/>\r\n            <Cancel />\r\n        </HeaderRight>\r\n\r\n    </HeaderContainer>\r\n}\r\n\r\nexport default Header;\r\n\r\nconst HeaderContainer = styled.div`\r\n    display: flex;\r\n    position: fixed;\r\n    width: 100%;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 10px 0;\r\n    background-color: var(--slack-color);\r\n    color: white;\r\n    `;\r\nconst HeaderLeft = styled.div`\r\nflex: .3;\r\ndisplay: flex;\r\nmargin-left: 20px;\r\nalign-items: center;\r\n\r\n>.MuiSvgIcon-root{\r\nmargin-left: auto;\r\nmargin-right: 30px;\r\n}\r\n  \r\n`;\r\nconst HeaderAvatar = styled(Avatar)`\r\n  cursor: pointer;\r\n  :hover{\r\n  opacity: .8;\r\n  }\r\n  \r\n`;\r\nconst HeaderSearch = styled.div`\r\n  flex: .4;\r\n  opacity: 1;\r\n  border-radius: 6px;\r\n  background-color: #421f44;\r\n  text-align: center;\r\n  display: flex;\r\n  padding: 0 50px;\r\n  color: gray;\r\n  border: 1px gray solid;\r\n  \r\n  >input{\r\n  background-color: transparent;\r\n  border: none;\r\n  text-align: center;\r\n  min-width: 30vh;\r\n  outline: none;\r\n  color: white;\r\n  }\r\n`;\r\nconst HeaderRight = styled.div`\r\n  flex: .3;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  >.MuiSvgIcon-root{\r\n  margin-left: auto;\r\n  margin-right: 20px;\r\n  }\r\n`\r\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Login.js",["122"],"import React from 'react';\r\nimport styled from \"styled-components\"\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {auth, provider, db} from \"../app/firebase\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\n\r\n\r\nfunction Login(props) {\r\n   const messagesRef = db.collection('users')\r\n    const signIn = e => {\r\n        e.preventDefault();\r\n        auth.signInWithPopup(provider)\r\n            .then((success) => {\r\n                console.log(success)\r\n\r\n\r\n                messagesRef.doc(success.user.uid).set({\r\n                    user_id:success.user.uid,\r\n                    username:success.user.displayName\r\n                })\r\n            })\r\n            .catch((error) => {\r\n           alert(\"We encounter this error while trying to sign you in with google: \"+error.message);\r\n        });\r\n\r\n    }\r\n    return (\r\n        <LoginContainer>\r\n            <LoginInnerContainer>\r\n                <img src=\"https://cdn.mos.cms.futurecdn.net/SDDw7CnuoUGax6x9mTo7dd.jpg\" alt=\"\"/>\r\n                <h1>Sign in to Legacy Network</h1>\r\n                <p>legacy.gideon.com</p>\r\n                <Button onClick={signIn}>Sign in with Google</Button>\r\n            </LoginInnerContainer>\r\n        </LoginContainer>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\nconst LoginContainer = styled.div`\r\nbackground-color: #f8f8f8;\r\nheight: 100vh;\r\ndisplay: grid;\r\nplace-items: center;\r\n  \r\n`\r\nconst LoginInnerContainer = styled.div`\r\npadding: 100px;\r\ntext-align: center;\r\nbackground-color: white;\r\nborder-radius: 10px;\r\nbox-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\r\n  >img{\r\n  object-fit: contain;\r\n  height: 100px;\r\n  margin-bottom: 40px;\r\n  }\r\n  >button{\r\n  margin-top: 50px;\r\n  text-transform: inherit !important;\r\n  background-color: #0a8d48;\r\n  color: white;\r\n  \r\n  }\r\n`","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatEngine.js",["123","124","125","126"],"import React, {useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport TestArea from \"./TestArea\";\r\nimport {useCollection} from \"react-firebase-hooks/firestore\";\r\nimport {db} from \"../app/firebase\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectRoomId} from \"../features/appSlice\";\r\n\r\nfunction ChatEngine(props) {\r\n    const roomId = useSelector(selectRoomId)\r\n    const [messages, setMessages] = useState([])\r\n    const [roomMessages, loading] = useCollection(\r\n        '2ATXydVpGG7nsudrYDyX' && db.collection('rooms')\r\n            .doc('2ATXydVpGG7nsudrYDyX')\r\n            .collection('messages')\r\n            .orderBy('timestamp', 'asc'))\r\n    roomMessages?.docs.map((doc) => {\r\n        setMessages(doc.get('user_id'))\r\n    })\r\n    return (\r\n        <ChatsEngine\r\n        renderChatFeed={()=><TestArea messages/>}\r\n        />\r\n    );\r\n}\r\n\r\nexport default ChatEngine;\r\n\r\nconst ChatsEngine = styled.div`\r\n  height: 100vh;\r\n  \r\n`\r\n\r\n",["127","128"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\TestArena.js",["129","130","131"],"import React, {useEffect, useState} from 'react';\nimport {auth, db} from \"../app/firebase\";\nimport firebase from \"firebase\";\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\n\nfunction TestArena(props) {\n    const [cinemas] = useState([]);\n    const [selectedCinema, setSelectedCinema] = useState();\n    const [movies, setMovies] = useState([]);\n\n    const [error, setError] = useState();\n    const [isMine] = useState();\n    const [userID] = useAuthState(auth)\n    const loggedInUser = userID.uid\n    const [roomsRef] = useCollection(db.collection(\"rooms\"))\n\n    const selectCinema = (cinema) => {\n\n        setSelectedCinema(cinema);\n        db.collection('rooms').doc(cinema.id).collection('messages')\n            .orderBy(\"timestamp\", \"desc\")\n            .limit(1)\n            .get()\n            .then(response => {\n                const fetchedMovies = [];\n                response.forEach(document => {\n                    //console.log(document.reads)\n\n\n                    const fetchedMovie = {\n\n                        id: document.id,\n                        ...document.data()\n                    };\n\n                    fetchedMovies.push(fetchedMovie);\n                });\n                setMovies(fetchedMovies);\n            })\n            .catch(error => {\n                setError(error);\n            });\n    }\n    const saveALike = (movie) => {\n        db.collection('rooms').doc(selectedCinema.id).collection('messages')\n            .doc(selectedCinema.m_id).set({\n            reads: firebase.firestore.FieldValue.arrayUnion({\n                //u_id: loggedInUser\n            })\n        }, {merge: true}).then(rs => console.log(\"Set\"))\n    }\n\n    const timestampToString = (timestamp) => {\n        return Date(timestamp).toString();\n    }\n\n    useEffect(() => {\n    roomsRef?.docs.map((room) => {\n        db.collection('rooms').doc(room.id).collection('messages')\n            .orderBy(\"timestamp\", \"desc\")\n            .limit(1)\n            .onSnapshot((doc) => {\n                console.log(doc.data())\n            })\n    })\n\n    }, [isMine]);\n    return (\n        <div>\n\n            {error ? (\n                <p>Ops, there is an error :(</p>\n            ) : null}\n            <ul>\n                {cinemas.map(cinema => (\n\n                    <li key={cinema.m_id} onClick={() => selectCinema(cinema)}>\n                        <b>{cinema.fetchedCinema +\"-\"+ cinema.message}</b>{isMine ? \"mine\" : \"not mine\"}\n                    </li>\n\n\n                ))}\n            </ul>\n            {selectedCinema ? (\n                <ul >\n                    {movies.map(movie => (\n                        <li key={movie.id} onClick={() => saveALike(movie)}>\n                            <b>{movie.message}</b> | {movie.user_id} | {timestampToString(movie.release_date)}\n                        </li>\n                    ))}\n                </ul>\n            ) : null}\n        </div>\n    );\n}\n\nexport default TestArena;","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\firestoreSlice.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\features\\appSlice.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\SidebarOption.js",["132","133","134","135","136","137","138","139","140","141","142","143"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Message.js",["144","145","146","147","148","149","150","151","152","153"],"import React, {useEffect, useRef, useState} from 'react';\nimport styled from 'styled-components'\nimport {useAuthState} from \"react-firebase-hooks/auth\";\nimport {auth, db} from \"../app/firebase\";\nimport {useSelector} from \"react-redux\";\nimport {selectRoomId} from \"../features/appSlice\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbDownAltIcon from \"@material-ui/icons/ThumbDownAlt\";\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport firebase from \"firebase\";\n\nimport {Arrow, useLayer} from \"react-laag\";\n\nimport {AnimatePresence, motion} from \"framer-motion\";\nimport {useCollection, useDocument} from \"react-firebase-hooks/firestore\";\nimport moment from \"moment\";\n\n\n\n\nfunction Message({message, timestamp, user, userImage, docId, user_id, firstMessage, showName}) {\n    const isCurrent = useRef(true)\n    const [userName] = useAuthState(auth);\n    const roomId = useSelector(selectRoomId);\n    const [style, setStyle] = useState({display: 'none'});\n    const [likesCount, setLikesCount] = useState(0);\n    const [like, setLike] = useState(false);\n    const [isMine, setIsMine] = useState(true);\n    //Toggler for hover\n    const [isOpen, setOpen] = useState(false);\n    let  [showimage, setShowImage] = useState(false)\n    const [timeSent, setTimeSent] = useState(null)\n\n    // helper function to close the menu\n    function close() {\n        setOpen(false);\n    }\n\n    //get the user ID of the currently logged in user\n\n    const loggedIn_user = userName.uid;\n\n    //Firestore collection references\n    const dbRef = db.collection('rooms')\n        .doc(roomId)\n        .collection('messages')\n        .doc(docId)\n    const likesRef = db.collection('rooms').doc(roomId).collection('messages').doc(docId).collection('likes')\n    const UserReadsRef = db.collection('users').doc(loggedIn_user).collection('rooms').doc(roomId)\n    const messagesRef = db.collection('rooms').doc(roomId).collection('messages').doc(docId)\n    const readsRef = useDocument(db.collection('rooms').doc(roomId).collection('messages').doc(docId))\n    const messageRef = db.collection('rooms').doc(roomId).collection('messages')\n    //const isFirstMessageByUser = !lastVisisble || las\n\n    //check next visible message\n\n    messagesRef.get().then((snap) => {\n        snap.data()?.user_id === loggedIn_user ? setIsMine(true) : setIsMine(false)\n\n\n\n        messageRef.startAfter()\n    })\n\n\n\n\n    //check if message is mine -- then float it right\n    const checkMyMessage = () => {\n        messagesRef.get().then((snap) => {\n            snap.data()?.user_id === loggedIn_user ? setIsMine(true) : setIsMine(false)\n\n        })\n    }\n    //check if messages are from same user\n    const checkRelated = () => {\n        messagesRef.get().then((snap) => {\n            if(snap.data()?.related === true){\n                setShowImage(true)\n\n\n            }else{\n                setShowImage(true)\n\n            }\n\n        })\n    }\n    //count likes\n    const countLikes = () =>{\n        db.collection('rooms')\n            .doc(roomId)\n            .collection('messages')\n            .doc(docId)?.get().then(querySnapshot => {\n\n\n                setLikesCount(querySnapshot.data()?.likesCount)\n                //console.log(`Number of likes = ${querySnapshot.data()?.likesCount}`);\n        })\n    }\n\n    //hover effect to display reactionbar\n    const { renderLayer, triggerProps, layerProps, arrowProps } = useLayer({\n        isOpen,\n        onOutsideClick: close, // close the menu when the user clicks outside\n        onDisappear: close, // close the menu when the menu gets scrolled out of sight\n        overflowContainer: false, // keep the menu positioned inside the container\n        auto: true, // automatically find the best placement\n        placement: \"top-end\", // we prefer to place the menu \"top-end\"\n        triggerOffset: -12, // keep some distance to the trigger\n        containerOffset: -16, // give the menu some room to breath relative to the container\n        arrowOffset: -16 // let the arrow have some room to breath also\n    });\n\n\n\n    const getDaysDiff = (start_date, end_date, date_format = 'YYYY-MM-DD') => {\n        const getDateAsArray = (date) => {\n            return moment(date.split(/\\D+/), date_format);\n        }\n        return getDateAsArray(end_date).diff(getDateAsArray(start_date), 'days') + 1;\n    }\n\n\n\n    useEffect(() => {\n\n        //check the last added message\n\n        if (isCurrent.current){\n            db.collection('rooms')\n                .doc(roomId)\n                .collection('messages')\n                .doc(docId).collection('likes')?.doc(userName.uid).get().then(querySnapshot => {\n                querySnapshot.data()?.like === 'liked' ? setLike(true) : setLike(false)\n            })\n            checkMyMessage();\n            countLikes();\n        }\n\n        return () => {\n            isCurrent.current = false;\n        }\n\n    }, []);\n\n   // checkRelated()\n\n    const markLastMessageRead = () => {\n        messageRef.orderBy(\"timestamp\", \"desc\").limit(1)\n            .onSnapshot(snapshot => {\n                snapshot.docs.map((response) => {\n                    UserReadsRef.set({\n                        id: response.id,\n                        read:true\n                    })\n\n                })\n            })\n    }\n\n\n\n\n    return (\n        <>\n\n\n            <MessageContainer\n\n                /*Hover effects for each message*/\n                onClick={e => {\n                    setStyle({display: 'block'});\n\n                }}\n                onMouseLeave={e => {\n                    setStyle({display: 'none'})\n                }}\n\n                isMine={isMine}\n            >\n\n                {/*Load Image here*/}\n\n                {showName ? <img src={userImage} alt=\"Legacy\" isMine={isMine}/> : <HiddenImg/> }\n\n\n\n                <p> </p>\n                <MessagePositionHolder\n                    {...triggerProps}\n                    onClick={e => {\n                        setOpen(true)\n                    }\n\n                    }\n                    onMouseLeave={e => {\n                        setOpen(!isOpen)\n\n                    }}\n\n                    isMine={isMine}\n\n                >\n\n\n\n                    {/*Format and display the message*/}\n                    <MessageInfo>\n\n                        <div>\n\n                            <h4>\n                                {!isMine && showName ? <>{user} <span>{getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 1 ? `Today at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                    getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 2 ? `Yesterday at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                    `${moment(timestamp?.toDate()).format(\"DD/MM HH:mm\")}`}</span></> :<><span>{getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 1 ? `Today at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                    getDaysDiff(moment(timestamp?.toDate()).format(\"YYYY-MM-DD\"), moment(new Date()).format(\"YYYY-MM-DD\")) === 2 ? `Yesterday at ${moment(timestamp?.toDate()).format(\"HH:mm\")}` :\n                                        `${moment(timestamp?.toDate()).format(\"DD/MM HH:mm\")}`}</span></>}\n\n                            </h4>\n\n                            {userName.uid  === user_id ?\n                                <MessageDeleter userName={user}><h3 onClick={() => {\n                                    messagesRef.delete()\n\n\n                                }}><strong>...</strong></h3></MessageDeleter>\n                                :\n                                null\n                            }\n\n\n\n                        </div>\n\n                        <p>{message}</p>\n\n\n                        <ReactionBar>\n\n                            {like ? <ThumbUpIcon/> :\n                                likesCount > 0 ?\n                                <ThumbUpOutlinedIcon/> : null}\n\n                            {likesCount > 0 ? <h3>{likesCount}</h3> : null }\n\n\n                        </ReactionBar>\n                    </MessageInfo>\n\n                </MessagePositionHolder>\n                {renderLayer(\n                    <AnimatePresence>\n                        {isOpen && (\n                            <motion.ul {...layerProps}>\n                                <EmojiBar style={style}\n                                >\n                                    <div>\n                                        <LikePackage onClick={() => {\n\n                                            const isLiked = () => {\n                                                likesRef?.doc(userName.uid).get().then(querySnapshot => {\n                                                    querySnapshot.data()?.like === 'liked' ? setLike(true) : setLike(false)\n                                                })\n                                            };\n                                            isLiked();\n                                            console.log(like)\n                                            console.log(`user id is ${userName.uid}`)\n\n                                            const u_id = userName.uid;\n                                            if (!like){\n\n                                                markLastMessageRead()\n\n                                                likesRef.doc(u_id)\n                                                    .set({\n\n                                                        like: 'liked',\n                                                    })\n                                                    .then(() => {\n                                                        console.log(\"Updated likes\")\n                                                        dbRef.update({\n\n                                                            likesCount: likesCount+1\n                                                        })\n\n                                                    }).catch(error => {\n                                                    console.log(error.getMessage)\n                                                })\n                                            }\n                                            else {\n                                                likesRef.doc(u_id)\n                                                    .update({\n\n                                                        like: firebase.firestore.FieldValue.delete()\n\n                                                    })\n                                                    .then(() => {\n                                                        dbRef.update({\n                                                            likesCount: likesCount-1\n                                                        })\n                                                    }).catch(error => {\n                                                    console.log(error.getMessage)\n                                                })\n\n                                            }\n\n                                        }}>{like ?\n                                            <ThumbUpIcon/> : <ThumbDownAltIcon/>}\n\n                                        </LikePackage>\n\n                                        <EmojiEmotionsIcon/>\n\n                                        {userName.uid === user_id ? <DeleteIcon onClick={() => {\n\n                                            messagesRef.delete()\n\n\n                                        }} /> : null}\n\n                                    </div>\n\n                                </EmojiBar>\n                                {/*<Arrow {...arrowProps} />*/}\n                            </motion.ul>\n                        )}\n                    </AnimatePresence>\n                )}\n            </MessageContainer>\n\n        </>\n    );\n}\n\nexport default Message;\nconst MessageContainer =  styled.div`\ndisplay: flex;\nalign-items: center;\npadding: ${p=>p.showimage ? '6px' : '2px'};\njustify-content: ${p => p.isMine ? 'space-between' : 'left'};\n>img{\nheight: 50px;\nborder-radius: 8px;\ndisplay: ${p=>p.isMine ? 'none' : 'block'};\n\n\n}\n`\nconst HiddenImg = styled.div`\n\nmargin-left: 50px;\n\nvisibility: hidden;\n\n`\nconst MessageInfo =  styled.div`\n    \n  >p{\n  color: black;\n  z-index: 99;\n  }\n  >h4{\n  color: black;\n  z-index: 99;\n  }\n\ndiv{\nalign-content: space-between;\ndisplay: flex;\nalign-items: center;\n>h4 > span{\ncolor: black;\nfont-weight: 300;\nmargin-left: 7px;\nfont-size: 14px;\nfloat: right;\n\n}\n\n}\n`\nconst MessageDeleter = styled.div`\n  >h3{\nfloat: right;\ntop: 0;\n\ndisplay: ${p=>p.userName ? 'center': 'none'};\n}\n`\nconst EmojiBar = styled.div`\n  height: 30px;\n  display: flex;\n  width: 100px;\n  border: 1px solid var(--slack-color);\n  float: right;\n  border-radius: 5px;\n  >div{\n  display: flex;\n  margin-left: 5px;\n  \n  justify-content: space-between;\n  align-items: center;\n  >.MuiSvgIcon-root{\n  font-size: 20px;\n  color: var(--slack-color);\n  :hover{\n    font-size: 30px;\n  }\n  }\n  }\n`\n\nconst LikePackage = styled.div`\n\n>.MuiSvgIcon-root{\n  color: var(--slack-color);\n  :hover{\n  font-size: 30px;\n  }\n  }\n  font-size: 20px;\n  cursor: pointer;\n  \n`\nconst ReactionBar = styled.div`\n  >.MuiSvgIcon-root{\n  color: var(--slack-color);\n  }\n  float: right;\n    \n`\nconst MessagePositionHolder = styled.div`\n  display: flex;\nalign-items: center;\npadding-top: 5px;\npadding-left: 5px;\npadding-right: 20px;\npadding-bottom: 7px;\nmargin-left: 5px;\nbackground: ${p => p.isMine ? '#b1cdfa' : 'lightgray'};\nmax-width: 50%;\n>img{\nheight: 50px;\nborder-radius: 8px;\n}\n  opacity: .5;\n\n  align-self: end;\n  border-radius: 7px;\n  border: 1px solid #340e36;\n`\n\n","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\ChatInput.js",["154"],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\TextInput.js",["155","156"],"import React, {\r\n    useCallback,\r\n    useMemo,\r\n    useState,\r\n} from 'react';\r\nimport { EditorState, convertToRaw } from 'draft-js';\r\nimport Editor from '@draft-js-plugins/editor';\r\nimport createMentionPlugin, {\r\n    defaultSuggestionsFilter,\r\n} from '@draft-js-plugins/mention';\r\nimport editorStyles from './editorStyles.module.css';\r\nimport mentions from './Mentions';\r\nimport '@draft-js-plugins/mention/lib/plugin.css';\r\nimport {useAuthState} from \"react-firebase-hooks/auth\";\r\nimport {auth, db} from \"../../app/firebase\";\r\nimport firebase from \"firebase\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function TextInput({channelName, channelId, chatRef}) {\r\n\r\n    const [editorState, setEditorState] = useState(() =>\r\n        EditorState.createEmpty()\r\n    );\r\n    const [open, setOpen] = useState(false);\r\n    const [suggestions, setSuggestions] = useState(mentions);\r\n    const [input, setInput] = useState('');\r\n    const [user] = useAuthState(auth);\r\n    const allMessagesRef = db.collection('rooms').doc(channelId).collection('messages').orderBy('timestamp', 'asc');\r\n\r\n\r\n    const { MentionSuggestions, plugins } = useMemo(() => {\r\n        const mentionPlugin = createMentionPlugin();\r\n        // eslint-disable-next-line no-shadow\r\n        const { MentionSuggestions } = mentionPlugin;\r\n        // eslint-disable-next-line no-shadow\r\n        const plugins = [mentionPlugin];\r\n        return { plugins, MentionSuggestions };\r\n    }, []);\r\n\r\n    const onOpenChange = useCallback((_open: boolean) => {\r\n        setOpen(_open);\r\n    }, []);\r\n    const onSearchChange = useCallback(({ value }: { value: string }) => {\r\n        setSuggestions(defaultSuggestionsFilter(value, mentions));\r\n    }, []);\r\n    //console.log(mentions)\r\n\r\n\r\n    const sendMessage = () => {\r\n        //e.preventDefault();\r\n        console.log(\"clicked\")\r\n        if (input) {\r\n            if (!channelId) {\r\n                return false;\r\n            }\r\n\r\n            allMessagesRef.get().then((documentSnapshots)=> {\r\n                const lastVisible = documentSnapshots.docs[documentSnapshots.docs.length - 1];\r\n\r\n\r\n\r\n                console.log('The document id be '+lastVisible?.id)\r\n\r\n\r\n\r\n                db.collection('rooms')\r\n                    .doc(channelId).collection('messages')\r\n                    .add({\r\n                        user_id: user.uid,\r\n                        message: input,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        user: user.displayName,\r\n                        userImage: user.photoURL,\r\n                        likesCount: 0,\r\n                        reads: null,\r\n\r\n\r\n                    }).then((rs) =>{\r\n                    console.log(\"succeeded\")\r\n\r\n                });\r\n\r\n            });\r\n\r\n\r\n\r\n        }\r\n        chatRef.current.scrollIntoView({\r\n            behavior:'smooth',\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <ChatInputContianer>\r\n            <form className={editorStyles.editor}\r\n                  onClick={() => {\r\n                      //ref.current.focus();\r\n                  }}>\r\n\r\n                <Editor\r\n\r\n                    editorState={editorState}\r\n                    onChange={setEditorState}\r\n                    plugins={plugins}\r\n                    // ref={ref}\r\n                />\r\n                <MentionSuggestions\r\n                    open={open}\r\n                    onOpenChange={onOpenChange}\r\n                    suggestions={suggestions}\r\n                    onSearchChange={onSearchChange}\r\n                    onAddMention={() => {\r\n\r\n                        // get the mention object selected\r\n                    }}\r\n                />\r\n                <Button onClick={() => {\r\n                    const contentState = editorState.getCurrentContent();\r\n                    const raw = convertToRaw(contentState);\r\n\r\n                    let mentionedUsers = [];\r\n                    for (let key in raw.entityMap){\r\n                        const ent = raw.entityMap[key];\r\n                        if (ent.type === 'mention'){\r\n                            mentionedUsers.push(ent.data.mention)\r\n                        }\r\n                    }\r\n\r\n                    console.log(raw.blocks)\r\n                    raw.blocks.map((txt) => {\r\n                        console.log(txt.text)\r\n                        setInput(txt.text)\r\n                    })\r\n                    sendMessage()\r\n                    //console.log(contentState)\r\n                    console.log(mentionedUsers)\r\n                }}>Extract Info</Button>\r\n            </form>\r\n        <form\r\n            className={editorStyles.editor}\r\n            onClick={() => {\r\n                //ref.current.focus();\r\n            }}\r\n        >\r\n            <Editor\r\n\r\n                editorState={editorState}\r\n                onChange={setEditorState}\r\n                plugins={plugins}\r\n               // ref={ref}\r\n            />\r\n            <MentionSuggestions\r\n                open={open}\r\n                onOpenChange={onOpenChange}\r\n                suggestions={suggestions}\r\n                onSearchChange={onSearchChange}\r\n                onAddMention={() => {\r\n\r\n                    // get the mention object selected\r\n                }}\r\n            />\r\n\r\n        </form>\r\n            <div>\r\n\r\n                <Button onClick={() => {\r\n                    const contentState = editorState.getCurrentContent();\r\n                    const raw = convertToRaw(contentState);\r\n\r\n                    let mentionedUsers = [];\r\n                    for (let key in raw.entityMap){\r\n                        const ent = raw.entityMap[key];\r\n                        if (ent.type === 'mention'){\r\n                            mentionedUsers.push(ent.data.mention)\r\n                        }\r\n                    }\r\n\r\n                    console.log(raw.blocks)\r\n                    raw.blocks.map((txt) => {\r\n                        console.log(txt.text)\r\n                        setInput(txt.text)\r\n                    })\r\n                    sendMessage()\r\n                    //console.log(contentState)\r\n                    console.log(mentionedUsers)\r\n                }}>Extract Info</Button>\r\n            </div>\r\n\r\n</ChatInputContianer>\r\n    );\r\n}\r\n\r\nconst ChatInputContianer = styled.div`\r\n  border-radius: 20px;\r\n  >form{\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  }\r\n  >form > Editor{\r\n  position: fixed;\r\n  width: 60%;\r\n  bottom: 30px;\r\n  border: 1px solid gray;\r\n  border-radius: 3px;\r\n  padding: 20px;\r\n  outline: none;\r\n  }\r\n  >form >Button{\r\n  bottom: 30px;\r\n  position: fixed;\r\n  display: none;\r\n  }\r\n`","C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Arena Playground\\List.js",[],"C:\\Users\\Gideon's\\WebstormProjects\\slack-clone\\src\\components\\Test Environment\\Mentions.js",["157"],"import {db} from \"../../app/firebase\";\r\n\r\nlet mentions = [\r\n    /*{\r\n        name: \"Matthew Russell\",\r\n        link: \"https://twitter.com/mrussell247\",\r\n        avatar:\r\n            \"https://pbs.twimg.com/profile_images/517863945/mattsailing_400x400.jpg\",\r\n        userId: 13\r\n    },\r\n    {\r\n        name: \"Julian Krispel-Samsel\",\r\n        link: \"https://twitter.com/juliandoesstuff\",\r\n        avatar: \"https://avatars2.githubusercontent.com/u/1188186?v=3&s=400\"\r\n    },\r\n    {\r\n        name: \"Jyoti Puri\",\r\n        link: \"https://twitter.com/jyopur\",\r\n        avatar: \"https://avatars0.githubusercontent.com/u/2182307?v=3&s=400\"\r\n    },\r\n    {\r\n        name: \"Max Stoiber\",\r\n        link: \"https://twitter.com/mxstbr\",\r\n        avatar:\r\n            \"https://pbs.twimg.com/profile_images/763033229993574400/6frGyDyA_400x400.jpg\"\r\n    },\r\n    {\r\n        name: \"Nik Graf\",\r\n        link: \"https://twitter.com/nikgraf\",\r\n        avatar: \"https://avatars0.githubusercontent.com/u/223045?v=3&s=400\"\r\n    },\r\n    {\r\n        name: \"Pascal Brandt\",\r\n        link: \"https://twitter.com/psbrandt\",\r\n        avatar:\r\n            \"https://pbs.twimg.com/profile_images/688487813025640448/E6O6I011_400x400.png\"\r\n    }*/\r\n];\r\n\r\ndb.collection('users').get().then((doc) => {\r\n    doc.docs.map((docment) => {\r\n        mentions.push({\r\n            name: docment.get(\"username\"),\r\n            link: \"https://twitter.com/nikgraf\",\r\n            avatar: \"https://avatars0.githubusercontent.com/u/223045?v=3&s=400\"\r\n        })\r\n    })\r\n})\r\n//console.log(mentions)\r\n\r\nexport default mentions;",{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":23,"column":9,"nodeType":"164","messageId":"165","endLine":23,"endColumn":21},{"ruleId":"162","severity":1,"message":"166","line":25,"column":9,"nodeType":"164","messageId":"165","endLine":25,"endColumn":14},{"ruleId":"167","severity":1,"message":"168","line":53,"column":42,"nodeType":"169","messageId":"170","endLine":53,"endColumn":44},{"ruleId":"162","severity":1,"message":"171","line":13,"column":8,"nodeType":"164","messageId":"165","endLine":13,"endColumn":17},{"ruleId":"162","severity":1,"message":"172","line":15,"column":8,"nodeType":"164","messageId":"165","endLine":15,"endColumn":14},{"ruleId":"162","severity":1,"message":"173","line":16,"column":8,"nodeType":"164","messageId":"165","endLine":16,"endColumn":16},{"ruleId":"162","severity":1,"message":"174","line":17,"column":8,"nodeType":"164","messageId":"165","endLine":17,"endColumn":17},{"ruleId":"162","severity":1,"message":"175","line":24,"column":12,"nodeType":"164","messageId":"165","endLine":24,"endColumn":25},{"ruleId":"162","severity":1,"message":"176","line":24,"column":27,"nodeType":"164","messageId":"165","endLine":24,"endColumn":44},{"ruleId":"162","severity":1,"message":"177","line":36,"column":12,"nodeType":"164","messageId":"165","endLine":36,"endColumn":23},{"ruleId":"162","severity":1,"message":"178","line":36,"column":25,"nodeType":"164","messageId":"165","endLine":36,"endColumn":39},{"ruleId":"162","severity":1,"message":"179","line":37,"column":11,"nodeType":"164","messageId":"165","endLine":37,"endColumn":22},{"ruleId":"162","severity":1,"message":"180","line":42,"column":12,"nodeType":"164","messageId":"165","endLine":42,"endColumn":29},{"ruleId":"162","severity":1,"message":"181","line":42,"column":31,"nodeType":"164","messageId":"165","endLine":42,"endColumn":51},{"ruleId":"162","severity":1,"message":"182","line":44,"column":11,"nodeType":"164","messageId":"165","endLine":44,"endColumn":22},{"ruleId":"162","severity":1,"message":"183","line":46,"column":11,"nodeType":"164","messageId":"165","endLine":46,"endColumn":28},{"ruleId":"162","severity":1,"message":"184","line":1,"column":16,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"185","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":33},{"ruleId":"162","severity":1,"message":"186","line":1,"column":35,"nodeType":"164","messageId":"165","endLine":1,"endColumn":43},{"ruleId":"162","severity":1,"message":"186","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"187","line":9,"column":15,"nodeType":"164","messageId":"165","endLine":9,"endColumn":23},{"ruleId":"162","severity":1,"message":"188","line":10,"column":9,"nodeType":"164","messageId":"165","endLine":10,"endColumn":18},{"ruleId":"162","severity":1,"message":"189","line":15,"column":11,"nodeType":"164","messageId":"165","endLine":15,"endColumn":19},{"ruleId":"162","severity":1,"message":"190","line":5,"column":9,"nodeType":"164","messageId":"165","endLine":5,"endColumn":22},{"ruleId":"162","severity":1,"message":"191","line":10,"column":11,"nodeType":"164","messageId":"165","endLine":10,"endColumn":17},{"ruleId":"162","severity":1,"message":"192","line":11,"column":12,"nodeType":"164","messageId":"165","endLine":11,"endColumn":20},{"ruleId":"162","severity":1,"message":"193","line":12,"column":26,"nodeType":"164","messageId":"165","endLine":12,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":17,"column":34,"nodeType":"169","messageId":"170","endLine":17,"endColumn":36},{"ruleId":"158","replacedBy":"194"},{"ruleId":"160","replacedBy":"195"},{"ruleId":"162","severity":1,"message":"196","line":15,"column":11,"nodeType":"164","messageId":"165","endLine":15,"endColumn":23},{"ruleId":"167","severity":1,"message":"168","line":59,"column":31,"nodeType":"169","messageId":"170","endLine":59,"endColumn":33},{"ruleId":"197","severity":1,"message":"198","line":68,"column":8,"nodeType":"199","endLine":68,"endColumn":16,"suggestions":"200"},{"ruleId":"162","severity":1,"message":"201","line":6,"column":9,"nodeType":"164","messageId":"165","endLine":6,"endColumn":18},{"ruleId":"162","severity":1,"message":"202","line":16,"column":12,"nodeType":"164","messageId":"165","endLine":16,"endColumn":20},{"ruleId":"162","severity":1,"message":"193","line":16,"column":22,"nodeType":"164","messageId":"165","endLine":16,"endColumn":29},{"ruleId":"162","severity":1,"message":"203","line":16,"column":31,"nodeType":"164","messageId":"165","endLine":16,"endColumn":36},{"ruleId":"162","severity":1,"message":"204","line":17,"column":12,"nodeType":"164","messageId":"165","endLine":17,"endColumn":24},{"ruleId":"162","severity":1,"message":"205","line":17,"column":26,"nodeType":"164","messageId":"165","endLine":17,"endColumn":41},{"ruleId":"162","severity":1,"message":"206","line":18,"column":12,"nodeType":"164","messageId":"165","endLine":18,"endColumn":23},{"ruleId":"162","severity":1,"message":"207","line":18,"column":25,"nodeType":"164","messageId":"165","endLine":18,"endColumn":39},{"ruleId":"162","severity":1,"message":"208","line":21,"column":11,"nodeType":"164","messageId":"165","endLine":21,"endColumn":24},{"ruleId":"167","severity":1,"message":"168","line":43,"column":38,"nodeType":"169","messageId":"170","endLine":43,"endColumn":40},{"ruleId":"197","severity":1,"message":"209","line":63,"column":8,"nodeType":"199","endLine":63,"endColumn":18,"suggestions":"210"},{"ruleId":"167","severity":1,"message":"168","line":87,"column":42,"nodeType":"169","messageId":"170","endLine":87,"endColumn":44},{"ruleId":"162","severity":1,"message":"211","line":15,"column":9,"nodeType":"164","messageId":"165","endLine":15,"endColumn":14},{"ruleId":"162","severity":1,"message":"190","line":18,"column":9,"nodeType":"164","messageId":"165","endLine":18,"endColumn":22},{"ruleId":"162","severity":1,"message":"212","line":34,"column":11,"nodeType":"164","messageId":"165","endLine":34,"endColumn":20},{"ruleId":"162","severity":1,"message":"213","line":35,"column":12,"nodeType":"164","messageId":"165","endLine":35,"endColumn":20},{"ruleId":"162","severity":1,"message":"214","line":35,"column":22,"nodeType":"164","messageId":"165","endLine":35,"endColumn":33},{"ruleId":"162","severity":1,"message":"215","line":54,"column":11,"nodeType":"164","messageId":"165","endLine":54,"endColumn":19},{"ruleId":"162","severity":1,"message":"216","line":79,"column":11,"nodeType":"164","messageId":"165","endLine":79,"endColumn":23},{"ruleId":"162","severity":1,"message":"217","line":106,"column":52,"nodeType":"164","messageId":"165","endLine":106,"endColumn":62},{"ruleId":"197","severity":1,"message":"218","line":148,"column":8,"nodeType":"199","endLine":148,"endColumn":10,"suggestions":"219"},{"ruleId":"167","severity":1,"message":"168","line":155,"column":46,"nodeType":"169","messageId":"170","endLine":155,"endColumn":48},{"ruleId":"162","severity":1,"message":"185","line":1,"column":16,"nodeType":"164","messageId":"165","endLine":1,"endColumn":22},{"ruleId":"167","severity":1,"message":"168","line":134,"column":42,"nodeType":"169","messageId":"170","endLine":134,"endColumn":44},{"ruleId":"167","severity":1,"message":"168","line":183,"column":42,"nodeType":"169","messageId":"170","endLine":183,"endColumn":44},{"ruleId":"167","severity":1,"message":"168","line":41,"column":28,"nodeType":"169","messageId":"170","endLine":41,"endColumn":30},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"no-unused-vars","'selectRoomId' is defined but never used.","Identifier","unusedVar","'onLog' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'MyMessage' is defined but never used.","'Button' is defined but never used.","'firebase' is defined but never used.","'TextInput' is defined but never used.","'renderMessage' is assigned a value but never used.","'setRenderMessages' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'setCurrentUser' is assigned a value but never used.","'messagesRef' is assigned a value but never used.","'toggleRoomDetails' is assigned a value but never used.","'setToggleRoomDetails' is assigned a value but never used.","'markReadRef' is assigned a value but never used.","'filterMessagesRef' is assigned a value but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'provider' is defined but never used.","'enterRoom' is defined but never used.","'dispatch' is assigned a value but never used.","'useCollection' is defined but never used.","'roomId' is assigned a value but never used.","'messages' is assigned a value but never used.","'loading' is assigned a value but never used.",["220"],["221"],"'loggedInUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'roomsRef?.docs'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'showBadge' is defined but never used.","'channels' is assigned a value but never used.","'error' is assigned a value but never used.","'chatMessages' is assigned a value but never used.","'setChatMessages' is assigned a value but never used.","'readReports' is assigned a value but never used.","'setReadReports' is assigned a value but never used.","'readReciptRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'readMessages' and 'userID.uid'. Either include them or remove the dependency array.",["223"],"'Arrow' is defined but never used.","'showimage' is assigned a value but never used.","'timeSent' is assigned a value but never used.","'setTimeSent' is assigned a value but never used.","'readsRef' is assigned a value but never used.","'checkRelated' is assigned a value but never used.","'arrowProps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkMyMessage', 'countLikes', 'docId', 'roomId', and 'userName.uid'. Either include them or remove the dependency array.",["224"],"no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [isMine, roomsRef?.docs]",{"range":"231","text":"232"},"Update the dependencies array to be: [readMessages, readsRef, userID.uid]",{"range":"233","text":"234"},"Update the dependencies array to be: [checkMyMessage, countLikes, docId, roomId, userName.uid]",{"range":"235","text":"236"},[2120,2128],"[isMine, roomsRef?.docs]",[1905,1915],"[readMessages, readsRef, userID.uid]",[5015,5017],"[checkMyMessage, countLikes, docId, roomId, userName.uid]"]